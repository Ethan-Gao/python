3.1 字符串基本操作
    a. 同序列一样，支持索引、分片、乘法、判断成员资格、求长度、取最大值、取最小值
    b. 与序列不同，字符串不可变，相当于C语言里面const字符串

3.2 字符串格式化-精简版
    a. 同C语言类似，%s-字符串，%f-浮点，%d-整型, %x-整型
    b. 使用库string.Template，$x
        若替换单词部分，需要使用${x}abc，否则会出错

3.3 字符串格式化-完整版
    a. 转换说明符构成:
        a1. %字符(标记转换符说明的开始)
        a2. 转换标志(可选): -1左对齐，+表示转换前加上正负号
            ""表示正数之前保留空格，0表示若转换位数不够用0填充
        a3. 最小字段宽度(可选): 转换后的字符串的最小宽度，*表示宽度从元组读出
        a4. 点(.)后跟随精度值(可选):
            实数表示小数的位数，字符串表示最大字段宽度，*表示精度从元组读出
        a5. 转换类型
            d,i-有符号10进制  o-无符号8进制   u-无符号10进制   x-无符号16进制(小写)   X-无符号16进制(大写)
            e-科学记数法浮点数(小写)  E-科学记数法浮点数(大写)  f,F-十进制浮点数
            r-字符串(使用repr转换任意python对象) s-字符串(使用str转换任意python字符串)
            g-如果指数大于-4或者小于精度值则和e相同，其他情况则与f相同
            g-如果指数大于-4或者小于精度值则和E相同，其他情况则与F相同
        a6. 字段宽度与精度
            宽度 - 转换后所保留的最小字符个数
            精度 - 结果中应包含的小数位数，对于字符串则为转换后所能包含的最大字符个数
            若同时存在则格式为宽度 + . + 精度，若只有精度则必须包含小数点
            可以使用*代替字段宽度或者精度(或者两者都用*)，此时数值会从元组参数中读出
        a7. 符号、对齐、0补充
            字段宽度和对齐之前还可以放置一个标号(0、+、-、空格)，0表示用0补充
            0 - 表示宽度不足时，用0补齐
            - - 左对齐，长度不足空格补齐
            空格 - 正数前加空格，负数则正好被-替代
            + - 无论正负数，都标识出符号

3.4 字符串方法
    a. 有用字符串常量
        string.digits: 包含数字0-9的字符串
        string.letters: 包含所有字母的字符串
        string.lowercase: 包含所有小写字母的字符串
        string.uppercase: 包含所有小写字母的字符串
        string.printable: 包含所有可打印字符的字符串
        string.punctuation: 包含所有标点的字符串
    b. find
        b1. 在一个较长字符串查找子串，类似C的strstr, 仅返回第一次查找的位置
        b2. 限定范围时使用find(str, start, end)查找start-end范围内str位置
        b3. 限定起点find(str, start)查找start-字符串末尾范围内str位置
    c. join
        用于向队列中添加元素，元素只能是字符串，一般效果类似连字符
    d. lower
        返回字符串的小写字母版
    e. replace
        替换字符串，类似txt查找替换
    f. split
       f1. 将字符串切割成序列，为join逆方法，仅支持字符串
       f2. 若split()无任何分隔符，程序默认将空格当作分隔符
    g. strip
        去除字符串两边的空格
    h. translate
        h1. 替换字符串某些部分，仅处理指定的字符
        h2. 一般需要先制作一个转换表，使用string库maketrans函数即可
            maketrans接收两个参数，第一个表示源字符串，第二个表示需要替换成的字符串
            例如maketrans("cs", "kz")表示所有c->k s->z
